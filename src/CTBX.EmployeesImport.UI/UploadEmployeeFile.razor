@page "/file-upload"
@inject ISnackbar Snackbar
@inject UploadEmployeesService Service

<MudPaper Class="d-flex flex-column align-center py-4">
    <MudText Typo="Typo.h4" GutterBottom="true">Employee File Upload</MudText>
    <MudText Typo="Typo.body1" Class="mb-4 text-center">
        Please upload a CSV or TXT file to import your employees into the database.
        Maximum 10 at once per upload.
        Supported formats: .csv or .txt.
        Each file must follow the required format.
    </MudText>

    <MudFileUpload
    T="IReadOnlyList<IBrowserFile>"
    Accept=".txt, .csv"
    FilesChanged="UploadFiles">
        <ActivatorContent>
            <MudButton Variant="Variant.Filled"
            Color="Color.Success"
            StartIcon="@Icons.Material.Filled.UploadFile">
                Upload Files
            </MudButton>
        </ActivatorContent>
    </MudFileUpload>

    @if (files != null)
    {
        <MudList T="string">
            @foreach (var file in files)
            {
                <MudListItem Icon="@Icons.Material.Filled.AttachFile">
                    @file.Name <code>@file.Size bytes</code>
                </MudListItem>
            }
        </MudList>
    }
</MudPaper>

@code {
    IList<IBrowserFile> files = new List<IBrowserFile>();
    private async Task UploadFiles(IReadOnlyList<IBrowserFile> files)
    {
        foreach (var file in files)
        {
            if (file.Size == 0)
            {
                Snackbar.Add("The file try to upload is empty, try again", Severity.Error);
                break;
            }
            Console.WriteLine($"Uploading file: {file.Name}, Size: {file.Size} bytes");
            try
            {
                this.files.Add(file); 
                await Service.UploadFile(file);
                Snackbar.Add("Upload succedded", Severity.Success);
            }
            catch
            {
                Snackbar.Add("something went wrong, try again.", Severity.Error);
            }

    }

    }

}
@* <div>
    <InputFile OnChange="FileUp"/>
</div>
<div>
    File name: @FileSize
</div>

@code{
    public string FileName { get; set; } = "";
    public long FileSize { get; set; }
    public async Task FileUp(InputFileChangeEventArgs e)
    {
        var b = e.File;
        if (b!= null)
        {
            FileSize = b.Size;
            FileName = b.Name;

            try
            {
                await Service.UploadFile(b);
            }
            catch
            {

            }
        }

    }
} *@